@using Client.Services.Foundations.AuthentificationStatService
@using System.Security.Claims;
@using Client.Services.Foundations.LocalStorageService
@inherits LayoutComponentBase

<div class="page">

<header>
        <nav class="navbar navbar-expand-lg navbar-light bg-gradient " style="">
            <div class="container-fluid justify-content-sm-between">
                
                   
                          <a class="navbar-brand">ALiaMed</a>
                    <form class="d-flex">
                @if(EmailUser != null){
                        <a href="/Home" class="text-black d-flex"> <button class="btn btn-light">@EmailUser</button><button @onclick="LogOut" class="btn btn-light"><svg xmlns="http://www.w3.org/2000/svg" height="30" viewBox="0 96 960 960" width="30"><path d="M180 936q-24 0-42-18t-18-42V276q0-24 18-42t42-18h291v60H180v600h291v60H180Zm486-185-43-43 102-102H375v-60h348L621 444l43-43 176 176-174 174Z" /></svg></button></a>
                    }else{
                        <a href="/SignIn"> <button class="btn btn-outline-success" type="submit">Sign In</button>&nbsp;</a>
                            <a href="/Login/Home"><button class="btn btn-outline-primary" type="submit">Login</button></a>
                }
               

                  
                </form>
                   
               
              
            </div>
</nav>
</header>

    @Body
    </div>

@code{
    protected string EmailUser = null;
    [Inject]
    public AuthentificationStatService AuthentificationStatService { get; set; }
    [Inject]
    public ILocalStorageServices localStorageServices { get; set; }
    [Inject]
    protected NavigationManager navigationManager { get; set; }
    protected override async Task OnInitializedAsync()
    {

        var UserStat = await this.AuthentificationStatService.GetAuthenticationStateAsync();
        if (UserStat.User.Identity?.IsAuthenticated ?? false)
        {
            this.EmailUser = UserStat.User.FindFirst(ClaimTypes.Name).Value;
        }


    }
    protected async Task LogOut()
    {
        await this.localStorageServices.RemoveItemAsync("JwtLocalStorage");
        this.navigationManager.NavigateTo("/Login/Home",forceLoad:true);
    }
    }
